import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export default async function handler(req, res) {
  // âœ… Handle CORS preflight request
  if (req.method === "OPTIONS") {
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type");
    return res.status(200).end();
  }

  // âœ… Set CORS headers for main requests
  res.setHeader("Access-Control-Allow-Origin", "*");

  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { planPriceId, extraChannels } = req.body;

    if (!planPriceId) {
      return res.status(400).json({ error: "Missing planPriceId" });
    }

    // ðŸ§® Build Stripe line items
    const line_items = [
      { price: planPriceId, quantity: 1 },
      ...(extraChannels || []).map(() => ({
        price: process.env.EXTRA_CHANNEL_PRICE_ID,
        quantity: 1,
      })),
    ];

    // ðŸ’³ Create checkout session
    const session = await stripe.checkout.sessions.create({
      mode: "subscription",
      payment_method_types: ["card"],
      line_items,
      success_url: "https://renewed-hands-398434.framer.app/success",
      cancel_url: "https://renewed-hands-398434.framer.app/cancel",
    });

    return res.status(200).json({ url: session.url });
  } catch (error) {
    console.error("Stripe Checkout Error:", error);
    return res.status(500).json({ error: error.message });
  }
}
